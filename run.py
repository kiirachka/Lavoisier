import asyncio
import logging
import sys
import os
from aiohttp import web
from telegram.ext import Application
from bot.main import create_bot_application, start_bot_application, stop_bot_application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_application = None
app_context = {}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
app = web.Application()

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram."""
    try:
        logger.info("üì• –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
        
        # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        update_json = await request.json()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        if bot_application:
            await bot_application.update_queue.put(update_json)
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {update_json.get('update_id', 'unknown')}")
        else:
            logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
        
        return web.Response(text="OK")
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(text="Error", status=500)

async def heartbeat_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    return web.Response(text="Bot is running", status=200)

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global bot_application, app_context
    
    logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    bot_application = await create_bot_application()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await start_bot_application(bot_application, app_context)
    
    logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")

def setup_routes():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        sys.exit(1)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞
    webhook_path = f"/webhook/{bot_token}"
    app.router.add_post(webhook_path, webhook_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    app.router.add_get('/heartbeat', heartbeat_handler)
    app.router.add_get('/', heartbeat_handler)
    
    logger.info(f"üåç –ú–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞: {webhook_path}")

async def start_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await init_app()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    setup_routes()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PORT)
    port = int(os.environ.get("PORT", 10000))
    
    logger.info(f"üåç aiohttp —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port}")
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞—Ç—å
    try:
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        await stop_server(runner)

async def stop_server(runner):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    await runner.cleanup()
    if bot_application:
        await stop_bot_application(bot_application, app_context)
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    logger.info("üü¢ [RUN.PY] –°—Ç–∞—Ä—Ç run.py...")
    logger.info(f"üü¢ [RUN.PY] Python executable: {sys.executable}")
    logger.info(f"üü¢ [RUN.PY] Python version: {sys.version}")
    logger.info(f"üü¢ [RUN.PY] Current directory: {os.getcwd()}")
    
    try:
        logger.info("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞...")
        from bot.main import create_bot_application, start_bot_application, stop_bot_application
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        asyncio.run(start_server())
        
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
