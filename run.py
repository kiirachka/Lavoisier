#!/usr/bin/env python3
# run.py
import os
import sys
import asyncio
import logging
from aiohttp import web
from bot.main import create_bot_application, start_bot_application, stop_bot_application

# --- –ü–æ–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è aiohttp.access ---
aiohttp_access_logger = logging.getLogger("aiohttp.access")
aiohttp_access_logger.setLevel(logging.WARNING)  # –ë—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ WARNING –∏ ERROR
# --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏—è ---

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# run.py

async def webhook_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –æ—Ç Telegram."""
    app_bot = request.app.get('bot_app')
    if not app_bot:
        logger.error("‚ùå Application –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app['bot_app'].")
        return web.Response(status=500, text="Bot Application not initialized")

    try:
        update_data = await request.json()
        logger.info(f"üì• –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_data}")  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û: INFO –≤–º–µ—Å—Ç–æ DEBUG
        await app_bot.update_queue.put(update_data)
        logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –±–æ—Ç–∞.")  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û: INFO
        return web.Response(status=200, text="OK")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:")
        return web.Response(status=500, text="Internal Server Error")

async def healthcheck_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    return web.Response(text="OK")


async def start_bot_wrapper(app):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        bot_app = await create_bot_application()
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await start_bot_application(bot_app, app)  # –ü–µ—Ä–µ–¥–∞—ë–º aiohttp app –∫–∞–∫ app_context
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Application –≤ aiohttp app
        app['bot_app'] = bot_app
        logger.info("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")
        # –ú–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        raise


async def cleanup_bot_wrapper(app):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    bot_app = app.get('bot_app')
    if bot_app:
        logger.info("üõë –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await stop_bot_application(bot_app)
        app['bot_app'] = None  # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        logger.info("‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    app = web.Application()

    # –†–æ—É—Ç—ã
    app.router.add_post("/webhook/{token}", webhook_handler)
    app.router.add_get("/heartbeat", healthcheck_handler)
    app.router.add_get("/", healthcheck_handler)  # –î–ª—è Render health check

    # –°–∏–≥–Ω–∞–ª—ã
    app.on_startup.append(start_bot_wrapper)
    app.on_cleanup.append(cleanup_bot_wrapper)

    return app


if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PORT
    app = create_app()

    logger.info(f"üåç aiohttp —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, host="0.0.0.0", port=port)
