#!/usr/bin/env python3
# run.py
import os
import sys
import asyncio
import logging
from aiohttp import web
from bot.main import initialize_bot, start_bot, stop_bot, bot_application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è run.py
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def webhook_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –æ—Ç Telegram."""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ URL (–º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å)
    url_token = request.match_info.get('token')
    expected_token = os.getenv('BOT_TOKEN', '').split(':')[1] if ':' in os.getenv('BOT_TOKEN', '') else None

    if not expected_token or url_token != expected_token:
        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –≤–µ–±—Ö—É–∫–µ: {url_token}")
        return web.Response(status=403, text="Forbidden")

    if not bot_application:
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return web.Response(status=500, text="Bot not initialized")

    try:
        update_data = await request.json()
        # logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_data}") # –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await bot_application.update_queue.put(update_data)
        return web.Response(status=200, text="OK")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:")
        return web.Response(status=500, text="Internal Server Error")


async def healthcheck_handler(request: web.Request) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    return web.Response(text="OK")


async def start_bot_wrapper(app):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        await initialize_bot()
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await start_bot()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        raise


async def cleanup_bot_wrapper(app):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üõë –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await stop_bot()
    logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def create_app() -> web.Application:
    """–°–æ–∑–¥–∞–µ—Ç aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    app = web.Application()

    # –†–æ—É—Ç—ã
    app.router.add_post("/webhook/{token}", webhook_handler)
    app.router.add_get("/heartbeat", healthcheck_handler)
    app.router.add_get("/", healthcheck_handler) # –î–ª—è Render health check

    # –°–∏–≥–Ω–∞–ª—ã
    app.on_startup.append(start_bot_wrapper)
    app.on_cleanup.append(cleanup_bot_wrapper)

    return app


if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000)) # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PORT
    app = create_app()

    logger.info(f"üåç aiohttp —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, host="0.0.0.0", port=port)
