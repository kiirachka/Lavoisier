# bot/handlers/admin.py
import os
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

def get_admin_ids() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    return [int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()]

def format_user_list(users: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not users:
        return "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

    lines = []
    for user in users:
        created_at = user.get('created_at')
        if created_at:
            try:
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime("%d/%m %H:%M")
            except:
                formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        name = f"{user.get('first_name') or ''} {user.get('last_name') or ''}".strip()
        if not name:
            name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        username = f"@{user['username']}" if user.get('username') else "‚Äî"
        line = f"‚Ä¢ {name} {username} (ID: {user['user_id']}) ‚Äî {formatted_date}"
        lines.append(line)
    
    return "
".join(lines)

async def _get_user_id_by_username(username: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç user_id –ø–æ username (–±–µ–∑ @)."""
    if username.startswith('@'):
        username = username[1:]
    supabase = get_supabase()
    response = supabase.table('users').select('user_id').eq('username', username).execute()
    if response.
        return response.data[0]['user_id']
    return None

async def list_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, username, first_name, last_name, created_at').order('created_at', desc=True).execute()
    users = response.data or []

    text = "üìã *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
" + format_user_list(users)
    await update.message.reply_text(text, parse_mode="Markdown")

async def list_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–≤–∞–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, username, first_name, last_name, created_at').eq('is_in_squad', True).order('created_at', desc=True).execute()
    users = response.data or []

    text = "üõ°Ô∏è *–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫–≤–∞–¥–∞:*
" + format_user_list(users)
    await update.message.reply_text(text, parse_mode="Markdown")

async def list_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ä–æ–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, username, first_name, last_name, created_at').eq('is_in_city', True).order('created_at', desc=True).execute()
    users = response.data or []

    text = "üèôÔ∏è *–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ä–æ–¥–∞:*
" + format_user_list(users)
    await update.message.reply_text(text, parse_mode="Markdown")

async def add_to_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–≤–∞–¥ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_to_squad <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    existing = supabase.table('users').select('user_id').eq('user_id', user_id).execute()
    if not existing.data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    supabase.table('users').update({
        'is_in_squad': True,
        'is_in_city': False
    }).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")

async def add_to_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–æ—Ä–æ–¥ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_to_city <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    existing = supabase.table('users').select('user_id').eq('user_id', user_id).execute()
    if not existing.data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    supabase.table('users').update({
        'is_in_city': True,
        'is_in_squad': False
    }).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–æ—Ä–æ–¥ –∏ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∫–≤–∞–¥–∞.")

async def remove_from_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∫–≤–∞–¥–∞ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_from_squad <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({'is_in_squad': False}).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∫–≤–∞–¥–∞.")

async def remove_from_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–æ—Ä–æ–¥–∞ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return  # –ù–ï –û–¢–í–ï–ß–ê–ï–ú ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_from_city <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({'is_in_city': False}).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} —É–¥–∞–ª—ë–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ù–ê ===
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({
        'is_banned': True,
        'banned_features': ['all']
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({
        'is_banned': False,
        'banned_features': []
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def restrict_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è)."""
    if update.effective_user.id not in get_admin_ids():
        return

    if len(context.args) < 2:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /restrict <@username –∏–ª–∏ user_id> <anketa|appeal>")
        return

    identifier = context.args[0]
    restriction = context.args[1].lower()
    
    if restriction not in ['anketa', 'appeal']:
        await update.message.reply_text("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: anketa, appeal")
        return

    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    response = supabase.table('users').select('banned_features').eq('user_id', user_id).execute()
    if response.
        current_bans = response.data[0].get('banned_features', [])
        if restriction not in current_bans:
            current_bans.append(restriction)
        
        supabase.table('users').update({
            'banned_features': current_bans
        }).eq('user_id', user_id).execute()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: {restriction}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

async def unrestrict_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.effective_user.id not in get_admin_ids():
        return

    if len(context.args) < 2:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unrestrict <@username –∏–ª–∏ user_id> <anketa|appeal>")
        return

    identifier = context.args[0]
    restriction = context.args[1].lower()
    
    if restriction not in ['anketa', 'appeal']:
        await update.message.reply_text("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: anketa, appeal")
        return

    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    response = supabase.table('users').select('banned_features').eq('user_id', user_id).execute()
    if response.data:
        current_bans = response.data[0].get('banned_features', [])
        if restriction in current_bans:
            current_bans.remove(restriction)
        
        supabase.table('users').update({
            'banned_features': current_bans
        }).eq('user_id', user_id).execute()
        await update.message.reply_text(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {identifier} —Å–Ω—è—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {restriction}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
