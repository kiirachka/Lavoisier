# bot/handlers/admin.py
import os
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

def get_admin_ids() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    return [int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()]

def format_user_list(users: list, title: str = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", squad_or_city=False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not users:
        return f"üì≠ {title} –ø—É—Å—Ç."

    lines = []
    for i, user in enumerate(users):
        created_at = user.get('created_at')
        if created_at:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime("%d/%m %H:%M")
            except ValueError:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        name = f"{user.get('first_name') or ''} {user.get('last_name') or ''}".strip()
        if not name:
            name = "–ë–µ–∑ –∏–º–µ–Ω–∏"

        username = f"@{user['username']}" if user.get('username') else "‚Äî"
        user_id = user['user_id']

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ---
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö, —Å–∫–≤–∞–¥–∞, –≥–æ—Ä–æ–¥–∞
        if squad_or_city:
            # ‚ô¶Ô∏èüîπ‚ô¶Ô∏è
            emoji = "‚ô¶Ô∏è" if i % 2 == 0 else "üîπ"
            line = f"{emoji} {name} üêú {username} (ID: {user_id}) -  {formatted_date}"
        else:
            # ‚ñ´Ô∏è ‚ñæÔ∏è
            emoji = "‚ñ´Ô∏è" if i % 2 == 0 else "‚óæÔ∏è"
            line = f"{emoji} {name} üêú {username} (ID: {user_id}) -  {formatted_date}"
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        lines.append(line)

    return f"{title}\n" + "\n".join(lines)

def format_banned_user_list(users: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    if not users:
        return "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."

    lines = []
    for user in users:
        name = f"{user.get('first_name') or ''} {user.get('last_name') or ''}".strip()
        if not name:
            name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{user['username']}" if user.get('username') else "‚Äî"
        user_id = user['user_id']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        is_banned_all = user.get('is_banned') or ('all' in user.get('banned_features', []))
        is_banned_anketa = 'anketa' in user.get('banned_features', [])
        is_banned_appeal = 'appeal' in user.get('banned_features', [])

        status_1 = "‚ùå" if is_banned_all else "‚úÖ"
        status_2 = "‚ùå" if is_banned_anketa else "‚úÖ"
        status_3 = "‚ùå" if is_banned_appeal else "‚úÖ"

        line = f"üîò {name} üêú {username} (ID: {user_id}) - {status_1} |{status_2} | {status_3}"
        lines.append(line)

    return "üìã *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n" + "\n".join(lines)

async def _get_user_id_by_username(username: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç user_id –ø–æ username (–±–µ–∑ @)."""
    if username.startswith('@'):
        username = username[1:]
    supabase = get_supabase()
    response = supabase.table('users').select('user_id').eq('username', username).execute()
    if response.
        return response.data[0]['user_id']
    return None

async def list_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, username, first_name, last_name, created_at').order('created_at', desc=True).execute()
    users = response.data or []

    text = format_user_list(users, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", squad_or_city=False)
    await update.message.reply_text(text)

async def list_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–≤–∞–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, username, first_name, last_name, created_at').eq('is_in_squad', True).order('created_at', desc=True).execute()
    users = response.data or []

    text = format_user_list(users, "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–∫–≤–∞–¥–∞", squad_or_city=True)
    await update.message.reply_text(text)

async def list_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ä–æ–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, username, first_name, last_name, created_at').eq('is_in_city', True).order('created_at', desc=True).execute()
    users = response.data or []

    text = format_user_list(users, "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ä–æ–¥–∞", squad_or_city=True)
    await update.message.reply_text(text)

async def list_banned_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å is_banned = True –∏–ª–∏ banned_features, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ 'all'
    response = supabase.table('users').select('user_id, username, first_name, last_name, is_banned, banned_features').or_('is_banned.eq.true,banned_features.cs.{all}').order('created_at', desc=True).execute()
    users = response.data or []

    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = format_banned_user_list(users)
    await update.message.reply_text(text, parse_mode="Markdown")

async def note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å)
    # if update.effective_user.id not in get_admin_ids():
    #     return

    commands = """
/admin_commands - –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
/list_all - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/list_squad - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–∫–≤–∞–¥–∞
/list_city - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ—Ä–æ–¥–∞
/list_banned - –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add_to_squad - –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–∫–≤–∞–¥
/add_to_city - –î–æ–±–∞–≤–∏—Ç—å –≤ –≥–æ—Ä–æ–¥
/remove_from_squad - –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–∫–≤–∞–¥–∞
/remove_from_city - –£–¥–∞–ª–∏—Ç—å –∏–∑ –≥–æ—Ä–æ–¥–∞
/ban - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/restrict - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
/unrestrict - –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
/broadcast_all - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
/broadcast_squad - –†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–≤–∞–¥—É
/broadcast_city - –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ–¥—É
/broadcast_starly - –†–∞—Å—Å—ã–ª–∫–∞ –°—Ç–∞—Ä–ª–∏
/broadcast_to_user - –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/broadcast_to_group - –†–∞—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç
/list_subscribers - –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫
/note - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
    """
    await update.message.reply_text(f"üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n{commands}", parse_mode="Markdown")

async def add_to_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–≤–∞–¥ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_to_squad <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    existing = supabase.table('users').select('user_id').eq('user_id', user_id).execute()
    if not existing.
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    supabase.table('users').update({
        'is_in_squad': True,
        'is_in_city': False
    }).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∫–≤–∞–¥ –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")

async def add_to_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–æ—Ä–æ–¥ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_to_city <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    existing = supabase.table('users').select('user_id').eq('user_id', user_id).execute()
    if not existing.
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    supabase.table('users').update({
        'is_in_city': True,
        'is_in_squad': False
    }).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–æ—Ä–æ–¥ –∏ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∫–≤–∞–¥–∞.")

async def remove_from_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∫–≤–∞–¥–∞ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_from_squad <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({'is_in_squad': False}).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∫–≤–∞–¥–∞.")

async def remove_from_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–æ—Ä–æ–¥–∞ –ø–æ @username –∏–ª–∏ user_id."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_from_city <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({'is_in_city': False}).eq('user_id', user_id).execute()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} —É–¥–∞–ª—ë–Ω –∏–∑ –≥–æ—Ä–æ–¥–∞.")

# === –§–£–ù–ö–¶–ò–ò –ë–ê–ù–ê ===
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({
        'is_banned': True,
        'banned_features': ['all']
    }).eq('user_id', user_id).execute()
    
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    try:
        await context.bot.send_message(chat_id=user_id, text="‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        from telegram import ReplyKeyboardRemove
        await context.bot.send_message(chat_id=user_id, text="‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        # logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        pass # –ò–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.effective_user.id not in get_admin_ids():
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <@username –∏–ª–∏ user_id>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    supabase.table('users').update({
        'is_banned': False,
        'banned_features': []
    }).eq('user_id', user_id).execute()

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    try:
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        main_keyboard = [
            ["ü§ñ –û –±–æ—Ç–µ", "üìù –ê–Ω–∫–µ—Ç–∞", "üì® –û–±—Ä–∞—â–µ–Ω–∏–µ"],
            ["üêç –ó–º–µ–π–∫–∞", "üé° –ë–∞—Ä–∞–±–∞–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ]
        from telegram import ReplyKeyboardMarkup
        reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    except Exception as e:
        # logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        pass # –ò–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def restrict_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è)."""
    if update.effective_user.id not in get_admin_ids():
        return

    if len(context.args) < 2:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /restrict <@username –∏–ª–∏ user_id> <anketa|appeal>")
        return

    identifier = context.args[0]
    restriction = context.args[1].lower()
    
    if restriction not in ['anketa', 'appeal']:
        await update.message.reply_text("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: anketa, appeal")
        return

    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    response = supabase.table('users').select('banned_features').eq('user_id', user_id).execute()
    if response.
        current_bans = response.data[0].get('banned_features', [])
        if restriction not in current_bans:
            current_bans.append(restriction)
        
        supabase.table('users').update({
            'banned_features': current_bans
        }).eq('user_id', user_id).execute()
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: {restriction}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

async def unrestrict_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.effective_user.id not in get_admin_ids():
        return

    if len(context.args) < 2:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unrestrict <@username –∏–ª–∏ user_id> <anketa|appeal>")
        return

    identifier = context.args[0]
    restriction = context.args[1].lower()
    
    if restriction not in ['anketa', 'appeal']:
        await update.message.reply_text("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: anketa, appeal")
        return

    user_id = None
    if identifier.startswith('@'):
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    supabase = get_supabase()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    response = supabase.table('users').select('banned_features').eq('user_id', user_id).execute()
    if response.
        current_bans = response.data[0].get('banned_features', [])
        if restriction in current_bans:
            current_bans.remove(restriction)
        
        supabase.table('users').update({
            'banned_features': current_bans
        }).eq('user_id', user_id).execute()
        await update.message.reply_text(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {identifier} —Å–Ω—è—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {restriction}")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
