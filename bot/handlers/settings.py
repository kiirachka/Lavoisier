# bot/handlers/settings.py
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

logger = logging.getLogger(__name__)

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    user_id = update.effective_user.id
    supabase = get_supabase()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_data = supabase.table('users').select('can_receive_broadcast').eq('user_id', user_id).execute()

    if not user_data.data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    can_receive = user_data.data[0]['can_receive_broadcast']
    status_text = "üîï –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞" if not can_receive else "üîî –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞"

    keyboard = [
        [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" if can_receive else "üîî –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                             callback_data="toggle_broadcast")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"‚öôÔ∏è {status_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    supabase = get_supabase()

    if query.data == "toggle_broadcast":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        user_data = supabase.table('users').select('can_receive_broadcast').eq('user_id', user_id).execute()
        if not user_data.data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        current_status = user_data.data[0]['can_receive_broadcast']
        new_status = not current_status

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        supabase.table('users').update({'can_receive_broadcast': new_status}).eq('user_id', user_id).execute()

        status_text = "üîï –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞" if not new_status else "üîî –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞"
        await query.edit_message_text(f"‚úÖ {status_text}")


async def handle_settings_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'."""
    text = update.message.text.strip()
    if text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        await settings_menu(update, context)
