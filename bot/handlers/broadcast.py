# bot/handlers/broadcast.py
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

logger = logging.getLogger(__name__)

def get_admin_ids() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    if not admin_ids_str:
        return []
    return [int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()]

async def broadcast_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞."""
    admin_ids = get_admin_ids()
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ä–∞—Å—Å—ã–ª–∫–∞_–≤—Å–µ–º <—Ç–µ–∫—Å—Ç>")
        return

    message_text = " ".join(context.args)
    supabase = get_supabase()
    
    try:
        response = supabase.table('users').select('user_id').eq('can_receive_broadcast', True).execute()
        users = response.data or []
        
        if not users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        sent_count = 0
        for user in users:
            try:
                await context.bot.send_message(chat_id=user['user_id'], text=message_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                continue

        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def broadcast_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º —Å–∫–≤–∞–¥–∞."""
    admin_ids = get_admin_ids()
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ä–∞—Å—Å—ã–ª–∫–∞_—Å–∫–≤–∞–¥ <—Ç–µ–∫—Å—Ç>")
        return

    message_text = " ".join(context.args)
    supabase = get_supabase()
    
    try:
        response = supabase.table('users').select('user_id').eq('is_in_squad', True).execute()
        users = response.data or []
        
        if not users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∫–≤–∞–¥–µ.")
            return

        sent_count = 0
        for user in users:
            try:
                await context.bot.send_message(chat_id=user['user_id'], text=message_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                continue

        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} —á–ª–µ–Ω–∞–º —Å–∫–≤–∞–¥–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∫–≤–∞–¥—É: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def broadcast_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º –≥–æ—Ä–æ–¥–∞."""
    admin_ids = get_admin_ids()
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ä–∞—Å—Å—ã–ª–∫–∞_–≥–æ—Ä–æ–¥ <—Ç–µ–∫—Å—Ç>")
        return

    message_text = " ".join(context.args)
    supabase = get_supabase()
    
    try:
        response = supabase.table('users').select('user_id').eq('is_in_city', True).execute()
        users = response.data or []
        
        if not users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.")
            return

        sent_count = 0
        for user in users:
            try:
                await context.bot.send_message(chat_id=user['user_id'], text=message_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                continue

        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} —á–ª–µ–Ω–∞–º –≥–æ—Ä–æ–¥–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–æ—Ä–æ–¥—É: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def broadcast_starly(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º, –∫—Ç–æ –≤ —Å–∫–≤–∞–¥–µ –ò–õ–ò –≤ –≥–æ—Ä–æ–¥–µ."""
    admin_ids = get_admin_ids()
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ä–∞—Å—Å—ã–ª–∫–∞_—Å—Ç–∞—Ä–ª–∏ <—Ç–µ–∫—Å—Ç>")
        return

    message_text = " ".join(context.args)
    supabase = get_supabase()
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ —Å–∫–≤–∞–¥–µ –ò–õ–ò –≤ –≥–æ—Ä–æ–¥–µ
        response = supabase.table('users').select('user_id').or_('is_in_squad.eq.true,is_in_city.eq.true').execute()
        users = response.data or []
        
        if not users:
            await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∫–≤–∞–¥–µ –∏–ª–∏ –≥–æ—Ä–æ–¥–µ.")
            return

        sent_count = 0
        for user in users:
            try:
                await context.bot.send_message(chat_id=user['user_id'], text=message_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                continue

        await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –°—Ç–∞—Ä–ª–∏.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –°—Ç–∞—Ä–ª–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.")
