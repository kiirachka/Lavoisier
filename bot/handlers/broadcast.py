# bot/handlers/broadcast.py
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

logger = logging.getLogger(__name__)

def get_admin_ids() -> list:
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    return [int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()]

async def broadcast_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if update.effective_user.id not in get_admin_ids():
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not context.args and not update.message.reply_to_message:
        await update.message.reply_text(
            "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º) –∫–æ–º–∞–Ω–¥–æ–π /broadcast_all\n"
            "2. –ò–ª–∏: /broadcast_all <—Ç–µ–∫—Å—Ç>"
        )
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id').eq('can_receive_broadcast', True).execute()
    users = response.data or []

    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    sent_count = 0
    failed_count = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ‚Äî –∏–∑ reply –∏–ª–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if update.message.reply_to_message:
        original_msg = update.message.reply_to_message
        for user in users:
            try:
                if original_msg.photo:
                    photo = original_msg.photo[-1].file_id
                    caption = original_msg.caption or ""
                    await context.bot.send_photo(
                        chat_id=user['user_id'],
                        photo=photo,
                        caption=caption,
                        parse_mode=original_msg.parse_mode
                    )
                elif original_msg.text:
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=original_msg.text,
                        parse_mode=original_msg.parse_mode
                    )
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç –∏ –Ω–µ —Ñ–æ—Ç–æ
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                failed_count += 1
    else:
        message_text = " ".join(context.args)
        for user in users:
            try:
                await context.bot.send_message(chat_id=user['user_id'], text=message_text)
                sent_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                failed_count += 1

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}"
    )
