# bot/handlers/broadcast.py
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

logger = logging.getLogger(__name__)

def get_admin_ids() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    return [int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()]

async def _send_message_to_users(context, users, original_msg=None, fallback_text=None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    sent_count = 0
    failed_count = 0

    for user in users:
        try:
            if original_msg:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                if original_msg.photo:
                    photo = original_msg.photo[-1].file_id
                    caption = original_msg.caption or ""
                    await context.bot.send_photo(
                        chat_id=user['user_id'],
                        photo=photo,
                        caption=caption,
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                elif original_msg.document:
                    await context.bot.send_document(
                        chat_id=user['user_id'],
                        document=original_msg.document.file_id,
                        caption=original_msg.caption or "",
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
                elif original_msg.sticker:
                    await context.bot.send_sticker(
                        chat_id=user['user_id'],
                        sticker=original_msg.sticker.file_id
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                elif original_msg.text:
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=original_msg.text,
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                elif original_msg.voice:
                    await context.bot.send_voice(
                        chat_id=user['user_id'],
                        voice=original_msg.voice.file_id,
                        caption=original_msg.caption or ""
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
                elif original_msg.video:
                    await context.bot.send_video(
                        chat_id=user['user_id'],
                        video=original_msg.video.file_id,
                        caption=original_msg.caption or "",
                        parse_mode=original_msg.parse_mode
                    )
                else:
                    logger.warning(f"–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}")
                    continue
            else:
                await context.bot.send_message(chat_id=user['user_id'], text=fallback_text)
            sent_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            failed_count += 1

    return sent_count, failed_count

async def broadcast_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id').eq('can_receive_broadcast', True).execute()
    users = response.data or []

    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text(
                "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí /broadcast_all\n"
                "2. –ò–ª–∏: /broadcast_all <—Ç–µ–∫—Å—Ç>"
            )
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Å –∑–∞–º–µ–Ω–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î

async def broadcast_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º —Å–∫–≤–∞–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id').eq('is_in_squad', True).execute()
    users = response.data or []

    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∫–≤–∞–¥–µ.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_squad <—Ç–µ–∫—Å—Ç>")
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–≤–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

async def broadcast_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º –≥–æ—Ä–æ–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id').eq('is_in_city', True).execute()
    users = response.data or []

    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_city <—Ç–µ–∫—Å—Ç>")
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

async def broadcast_starly(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º, –∫—Ç–æ –≤ —Å–∫–≤–∞–¥–µ –ò–õ–ò –≤ –≥–æ—Ä–æ–¥–µ."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id').or_('is_in_squad.eq.true,is_in_city.eq.true').execute()
    users = response.data or []

    if not users:
        await update.message.reply_text("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∫–≤–∞–¥–µ –∏–ª–∏ –≥–æ—Ä–æ–¥–µ.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_starly <—Ç–µ–∫—Å—Ç>")
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –°—Ç–∞—Ä–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )
