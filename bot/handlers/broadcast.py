# bot/handlers/broadcast.py
import os
import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.database.core import get_supabase

logger = logging.getLogger(__name__)

def get_admin_ids() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    admin_ids_str = os.getenv("ADMIN_IDS", "")
    return [int(x.strip()) for x in admin_ids_str.split(",") if x.strip().isdigit()]

async def _send_message_to_users(context, users, original_msg=None, fallback_text=None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    sent_count = 0
    failed_count = 0
    for user in users:
        try:
            if original_msg:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                if original_msg.photo:
                    photo = original_msg.photo[-1].file_id
                    caption = original_msg.caption or ""
                    parse_mode = original_msg.parse_mode if hasattr(original_msg, 'parse_mode') else None
                    await context.bot.send_photo(
                        chat_id=user['user_id'],
                        photo=photo,
                        caption=caption,
                        parse_mode=parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                elif original_msg.text:
                    parse_mode = original_msg.parse_mode if hasattr(original_msg, 'parse_mode') else None
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=original_msg.text,
                        parse_mode=parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                elif original_msg.document:
                    await context.bot.send_document(
                        chat_id=user['user_id'],
                        document=original_msg.document.file_id,
                        caption=original_msg.caption or "",
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
                elif original_msg.sticker:
                    await context.bot.send_sticker(
                        chat_id=user['user_id'],
                        sticker=original_msg.sticker.file_id
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                elif original_msg.voice:
                    await context.bot.send_voice(
                        chat_id=user['user_id'],
                        voice=original_msg.voice.file_id,
                        caption=original_msg.caption or ""
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
                elif original_msg.video:
                    await context.bot.send_video(
                        chat_id=user['user_id'],
                        video=original_msg.video.file_id,
                        caption=original_msg.caption or "",
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
                elif original_msg.audio:
                    await context.bot.send_audio(
                        chat_id=user['user_id'],
                        audio=original_msg.audio.file_id,
                        caption=original_msg.caption or "",
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π (gif)
                elif original_msg.animation:
                    await context.bot.send_animation(
                        chat_id=user['user_id'],
                        animation=original_msg.animation.file_id,
                        caption=original_msg.caption or "",
                        parse_mode=original_msg.parse_mode
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                elif original_msg.location:
                    await context.bot.send_location(
                        chat_id=user['user_id'],
                        latitude=original_msg.location.latitude,
                        longitude=original_msg.location.longitude
                    )
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                elif original_msg.contact:
                    await context.bot.send_contact(
                        chat_id=user['user_id'],
                        phone_number=original_msg.contact.phone_number,
                        first_name=original_msg.contact.first_name,
                        last_name=original_msg.contact.last_name or ""
                    )
                else:
                    logger.warning(f"–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {type(original_msg)}")
                    continue
            else:
                await context.bot.send_message(chat_id=user['user_id'], text=fallback_text)
            sent_count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            failed_count += 1

    return sent_count, failed_count

async def broadcast_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, can_receive_broadcast').eq('can_receive_broadcast', True).execute()
    users = [u for u in response.data or [] if u.get('can_receive_broadcast', True)] # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ can_receive_broadcast

    if not users:
        await update.message.reply_text(" obstruction {users} –ø—É—Å—Ç.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text(
                "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí /broadcast_all\n"
                "2. –ò–ª–∏: /broadcast_all <—Ç–µ–∫—Å—Ç>"
            )
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

async def broadcast_squad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º —Å–∫–≤–∞–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, can_receive_broadcast').eq('is_in_squad', True).eq('can_receive_broadcast', True).execute()
    users = [u for u in response.data or [] if u.get('can_receive_broadcast', True)]

    if not users:
        await update.message.reply_text(" obstruction {users} –ø—É—Å—Ç.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_squad <—Ç–µ–∫—Å—Ç>")
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–∫–≤–∞–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

async def broadcast_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Ç–æ–ª—å–∫–æ —á–ª–µ–Ω–∞–º –≥–æ—Ä–æ–¥–∞."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, can_receive_broadcast').eq('is_in_city', True).eq('can_receive_broadcast', True).execute()
    users = [u for u in response.data or [] if u.get('can_receive_broadcast', True)]

    if not users:
        await update.message.reply_text(" obstruction {users} –ø—É—Å—Ç.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_city <—Ç–µ–∫—Å—Ç>")
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ä–æ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

async def broadcast_starly(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º, –∫—Ç–æ –≤ —Å–∫–≤–∞–¥–µ –ò–õ–ò –≤ –≥–æ—Ä–æ–¥–µ."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    response = supabase.table('users').select('user_id, can_receive_broadcast').or_('is_in_squad.eq.true,is_in_city.eq.true').eq('can_receive_broadcast', True).execute()
    users = [u for u in response.data or [] if u.get('can_receive_broadcast', True)]

    if not users:
        await update.message.reply_text(" obstruction {users} –ø—É—Å—Ç.")
        return

    if update.message.reply_to_message:
        sent, failed = await _send_message_to_users(context, users, original_msg=update.message.reply_to_message)
    else:
        if not context.args:
            await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_starly <—Ç–µ–∫—Å—Ç>")
            return
        message_text = " ".join(context.args)
        sent, failed = await _send_message_to_users(context, users, fallback_text=message_text)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –°—Ç–∞—Ä–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

# === –ù–û–í–û–ï: –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
async def broadcast_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if update.effective_user.id not in get_admin_ids():
        return

    if len(context.args) < 1:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_to_user <@username –∏–ª–∏ user_id> <—Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    identifier = context.args[0]
    user_id = None
    if identifier.startswith('@'):
        from bot.handlers.admin import _get_user_id_by_username # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ admin.py
        user_id = await _get_user_id_by_username(identifier)
        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
    else:
        try:
            user_id = int(identifier)
        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ username ‚Äî –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @.")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
    supabase = get_supabase()
    user_response = supabase.table('users').select('can_receive_broadcast, is_banned, banned_features').eq('user_id', user_id).execute()
    if not user_response.data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    user_data = user_response.data[0]
    if not user_data.get('can_receive_broadcast', True): # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫–∏
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –æ—Ç–∫–ª—é—á–∏–ª —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_banned = user_data.get('is_banned', False)
    banned_features = user_data.get('banned_features', [])
    if is_banned or 'all' in banned_features:
        await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    if update.message.reply_to_message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent, failed = await _send_message_to_users(context, [{'user_id': user_id}], original_msg=update.message.reply_to_message)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        message_text = " ".join(context.args[1:]) # –ë–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ username/user_id
        if not message_text:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω.")
            return
        sent, failed = await _send_message_to_users(context, [{'user_id': user_id}], fallback_text=message_text)

    status_text = "‚úÖ" if sent > 0 else "‚ùå"
    await update.message.reply_text(f"{status_text} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {identifier}.")

# === –ù–û–í–û–ï: –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É ===
async def broadcast_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É/—á–∞—Ç."""
    if update.effective_user.id not in get_admin_ids():
        return

    if len(context.args) < 1:
        await update.message.reply_text("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_to_group <chat_id> <—Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    try:
        chat_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if update.message.reply_to_message:
        original_msg = update.message.reply_to_message
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            if original_msg.photo:
                await context.bot.send_photo(chat_id=chat_id, photo=original_msg.photo[-1].file_id, caption=original_msg.caption or "", parse_mode=original_msg.parse_mode)
            elif original_msg.text:
                await context.bot.send_message(chat_id=chat_id, text=original_msg.text, parse_mode=original_msg.parse_mode)
            elif original_msg.document:
                await context.bot.send_document(chat_id=chat_id, document=original_msg.document.file_id, caption=original_msg.caption or "", parse_mode=original_msg.parse_mode)
            elif original_msg.sticker:
                await context.bot.send_sticker(chat_id=chat_id, sticker=original_msg.sticker.file_id)
            elif original_msg.voice:
                await context.bot.send_voice(chat_id=chat_id, voice=original_msg.voice.file_id, caption=original_msg.caption or "")
            elif original_msg.video:
                await context.bot.send_video(chat_id=chat_id, video=original_msg.video.file_id, caption=original_msg.caption or "", parse_mode=original_msg.parse_mode)
            elif original_msg.audio:
                await context.bot.send_audio(chat_id=chat_id, audio=original_msg.audio.file_id, caption=original_msg.caption or "", parse_mode=original_msg.parse_mode)
            elif original_msg.animation:
                await context.bot.send_animation(chat_id=chat_id, animation=original_msg.animation.file_id, caption=original_msg.caption or "", parse_mode=original_msg.parse_mode)
            else:
                await update.message.reply_text("‚ùå –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç.")
                return
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}")
    else:
        message_text = " ".join(context.args[1:])
        if not message_text:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω.")
            return
        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}")

# === –ù–û–í–û–ï: –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫ ===
async def list_subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç/–Ω–µ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if update.effective_user.id not in get_admin_ids():
        return

    supabase = get_supabase()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_response = supabase.table('users').select('user_id, username, first_name, last_name, can_receive_broadcast, is_banned, banned_features').order('created_at', desc=True).execute()
    all_users = all_response.data or []

    if not all_users:
        await update.message.reply_text(" obstruction {users} –ø—É—Å—Ç.")
        return

    receiving = []
    not_receiving = []
    banned = []

    for user in all_users:
        name = f"{user.get('first_name') or ''} {user.get('last_name') or ''}".strip()
        if not name:
            name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = f"@{user['username']}" if user.get('username') else "‚Äî"
        user_id = user['user_id']

        is_banned = user.get('is_banned', False)
        banned_features = user.get('banned_features', [])
        can_receive = user.get('can_receive_broadcast', True)

        if is_banned or 'all' in banned_features:
            banned.append(f"‚ùå {name} üêú {username} (ID: {user_id})")
        elif not can_receive:
            not_receiving.append(f"üîï {name} üêú {username} (ID: {user_id})")
        else:
            receiving.append(f"üîî {name} üêú {username} (ID: {user_id})")

    message_parts = []
    if receiving:
        message_parts.append(f"üîî *–ü–æ–ª—É—á–∞—é—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ({len(receiving)}):*\n" + "\n".join(receiving))
    if not_receiving:
        message_parts.append(f"üîï *–û—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ ({len(not_receiving)}):*\n" + "\n".join(not_receiving))
    if banned:
        message_parts.append(f"‚ùå *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ({len(banned)}):*\n" + "\n".join(banned))

    full_message = "\n\n".join(message_parts) if message_parts else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    await update.message.reply_text(full_message, parse_mode="Markdown")
