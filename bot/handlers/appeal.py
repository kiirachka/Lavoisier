# bot/handlers/appeal.py
import re
import os
import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from bot.database.core import get_supabase

# –°–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ anketa.py (USER_TYPE, MESSAGE)
from bot.handlers.anketa import USER_TYPE, MESSAGE, validate_text

logger = logging.getLogger(__name__)

async def start_appeal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    supabase = get_supabase()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    supabase.table('temp_appeals').delete().eq('user_id', user_id).execute()
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    supabase.table('temp_appeals').insert({
        'user_id': user_id,
        'step': 'user_type'
    }).execute()
    
    await update.message.reply_text(
        "üì® –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
        "‚ùì –ö—Ç–æ –≤—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—á–∞—Å—Ç–Ω–∏–∫, –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞, –Ω–æ–≤–∏—á–æ–∫ –∏ —Ç.–¥.):"
    )
    return USER_TYPE

async def receive_user_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if not validate_text(text):
        await update.message.reply_text(
            "‚ùå –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return USER_TYPE
    
    supabase = get_supabase()
    supabase.table('temp_appeals').update({
        'user_type': text,
        'step': 'message'
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "üí¨ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å?"
    )
    return MESSAGE

async def receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if not validate_text(text):
        await update.message.reply_text(
            "‚ùå –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return MESSAGE
    
    supabase = get_supabase()
    response = supabase.table('temp_appeals').select('*').eq('user_id', user_id).execute()
    if not response.data:  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ response.
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    data = response.data[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f"üì¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
        f"üë§ –ö—Ç–æ: {data['user_type']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n"
        f"üÜî ID: {user_id} | {username}\n"
        f"üë§ –ò–º—è: {full_name}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    admin_chat_id = os.getenv("ADMIN_CHAT_ID")
    if admin_chat_id:
        try:
            await context.bot.send_message(chat_id=admin_chat_id, text=admin_message)
            await update.message.reply_text(
                "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –°–ø–∞—Å–∏–±–æ! üéâ"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    supabase.table('temp_appeals').delete().eq('user_id', user_id).execute()
    
    return ConversationHandler.END

async def cancel_appeal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    supabase = get_supabase()
    supabase.table('temp_appeals').delete().eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
