# bot/handlers/appeal.py
import re
import os
import logging
from datetime import datetime, timedelta, timezone # –î–æ–±–∞–≤–ª–µ–Ω timezone
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from bot.database.core import get_supabase

# –°–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ anketa.py (USER_TYPE, MESSAGE)
from bot.handlers.anketa import USER_TYPE, MESSAGE, validate_text

logger = logging.getLogger(__name__)

async def start_appeal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    supabase = get_supabase()
    
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±–∞–Ω–∞ ---
    user_response = supabase.table('users').select('is_banned').eq('user_id', user_id).execute()
    if user_response.data: # –ò–°–ü–†–ê–í–õ–ï–ù–û: .data
        user_data = user_response.data[0]
        if user_data.get('is_banned'):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –∞–Ω–∫–µ—Ç—ã –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
            main_keyboard = [
                ["ü§ñ –û –±–æ—Ç–µ"],
                ["üêç –ó–º–µ–π–∫–∞", "üé° –ë–∞—Ä–∞–±–∞–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
            ]
            reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return ConversationHandler.END
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
    
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –±–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ---
    user_response = supabase.table('users').select('banned_features').eq('user_id', user_id).execute()
    if user_response.data:
        user_data = user_response.data[0]
        banned_features = user_data.get('banned_features', [])
        if 'appeal' in banned_features:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
            main_keyboard = [
                ["ü§ñ –û –±–æ—Ç–µ", "üìù –ê–Ω–∫eta"],
                ["üêç –ó–º–µ–π–∫–∞", "üé° –ë–∞—Ä–∞–±–∞–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
            ]
            reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return ConversationHandler.END
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
    anketa_check = supabase.table('temp_applications').select('user_id').eq('user_id', user_id).execute()
    appeal_check = supabase.table('temp_appeals').select('user_id').eq('user_id', user_id).execute()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ .data (—Å—Ç—Ä–æ–∫–∞ 59)
    if anketa_check.data or appeal_check.data:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    response = supabase.table('users').select('last_anketa_time, last_appeal_time').eq('user_id', user_id).execute()
    if response.data: # –ò–°–ü–†–ê–í–õ–ï–ù–û: .data
        user_data = response.data[0]
        last_anketa = user_data.get('last_anketa_time')
        last_appeal = user_data.get('last_appeal_time')

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware now ---
        now = datetime.now(timezone.utc)

        if last_anketa:
            # last_anketa –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º tzinfo
            last_anketa_time = datetime.fromisoformat(last_anketa.replace('Z', '+00:00')).replace(tzinfo=timezone.utc)
            time_diff = now - last_anketa_time # –¢–µ–ø–µ—Ä—å –æ–±–∞ aware
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 3 —á–∞—Å–∞
            if time_diff < timedelta(hours=3):
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 3 —á–∞—Å–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
                if time_diff < timedelta(minutes=20):
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - 20 –º–∏–Ω—É—Ç
                    await update.message.reply_text("‚è±Ô∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–Ω–∫–µ—Ç—ã.")
                    return ConversationHandler.END
                elif time_diff < timedelta(minutes=3):
                    # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - 3 –º–∏–Ω—É—Ç—ã
                    await update.message.reply_text("‚è±Ô∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–Ω–∫–µ—Ç—ã.")
                    return ConversationHandler.END

        if last_appeal:
            # last_appeal –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º tzinfo
            last_appeal_time = datetime.fromisoformat(last_appeal.replace('Z', '+00:00')).replace(tzinfo=timezone.utc)
            time_diff = now - last_appeal_time # –¢–µ–ø–µ—Ä—å –æ–±–∞ aware
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 3 —á–∞—Å–∞
            if time_diff < timedelta(hours=3):
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 3 —á–∞—Å–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
                if time_diff < timedelta(minutes=3):
                    # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - 3 –º–∏–Ω—É—Ç—ã
                    await update.message.reply_text("‚è±Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")
                    return ConversationHandler.END
                elif time_diff < timedelta(minutes=20):
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - 20 –º–∏–Ω—É—Ç
                    await update.message.reply_text("‚è±Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.")
                    return ConversationHandler.END
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    supabase.table('temp_appeals').delete().eq('user_id', user_id).execute()
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    supabase.table('temp_appeals').insert({
        'user_id': user_id,
        'step': 'user_type'
    }).execute()
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ç–º–µ–Ω–æ–π
    keyboard = [
        ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üì® –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n"
        "‚ùì –ö—Ç–æ –≤—ã? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É—á–∞—Å—Ç–Ω–∏–∫, –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞, –Ω–æ–≤–∏—á–æ–∫ –∏ —Ç.–¥.):",
        reply_markup=reply_markup
    )
    return USER_TYPE

async def receive_user_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel_appeal(update, context)
    
    if not validate_text(text):
        await update.message.reply_text(
            "‚ùå –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return USER_TYPE
    
    supabase = get_supabase()
    supabase.table('temp_appeals').update({
        'user_type': text,
        'step': 'message'
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "üí¨ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å?"
    )
    return MESSAGE

async def receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        return await cancel_appeal(update, context)
    
    if not validate_text(text):
        await update.message.reply_text(
            "‚ùå –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return MESSAGE
    
    supabase = get_supabase()
    response = supabase.table('temp_appeals').select('*').eq('user_id', user_id).execute()
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ .data (—Å—Ç—Ä–æ–∫–∞ 134)
    if not response.data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    data = response.data[0]
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f"üì¨ *–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!*\n"
        f"üë§ *–ö—Ç–æ:* `{data['user_type']}`\n"
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n```\n{text}\n```\n"
        f"üÜî *ID:* `{user_id}` | {username}\n"
        f"üë§ *–ò–º—è:* `{full_name}`"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    admin_chat_id = os.getenv("ADMIN_CHAT_ID")
    if admin_chat_id:
        try:
            await context.bot.send_message(chat_id=admin_chat_id, text=admin_message, parse_mode="Markdown")
            await update.message.reply_text(
                "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –°–ø–∞—Å–∏–±–æ! üéâ"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware datetime
            from datetime import datetime
            supabase.table('users').update({
                'last_appeal_time': datetime.now(timezone.utc).isoformat()
            }).eq('user_id', user_id).execute()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    supabase.table('temp_appeals').delete().eq('user_id', user_id).execute()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    main_keyboard = [
        ["ü§ñ –û –±–æ—Ç–µ", "üìù –ê–Ω–∫–µ—Ç–∞", "üì® –û–±—Ä–∞—â–µ–Ω–∏–µ"],
        ["üêç –ó–º–µ–π–∫–∞", "üé° –ë–∞—Ä–∞–±–∞–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    return ConversationHandler.END

async def cancel_appeal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    supabase = get_supabase()
    supabase.table('temp_appeals').delete().eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    main_keyboard = [
        ["ü§ñ –û –±–æ—Ç–µ", "üìù –ê–Ω–∫–µ—Ç–∞", "üì® –û–±—Ä–∞—â–µ–Ω–∏–µ"],
        ["üêç –ó–º–µ–π–∫–∞", "üé° –ë–∞—Ä–∞–±–∞–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    return ConversationHandler.END
