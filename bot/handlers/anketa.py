# bot/handlers/anketa.py
import re
import os
import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from bot.database.core import get_supabase

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∫–µ—Ç—ã
NAME, AGE, GAME_NICKNAME, WHY_JOIN = range(4)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ appeal.py
USER_TYPE, MESSAGE = range(4, 6)

logger = logging.getLogger(__name__)

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ _)
def validate_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–∫—Ä–æ–º–µ _)."""
    # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    allowed_pattern = r'^[a-zA-Z–∞-—è–ê-–Ø0-9\s_.,!?;:()\-]+$'
    return bool(re.match(allowed_pattern, text))

# –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –Ω–∏–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _
def validate_nickname(nickname: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _."""
    return bool(re.match(r'^[a-zA-Z0-9_]+$', nickname))

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."""
    user_id = update.effective_user.id
    supabase = get_supabase()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
    supabase.table('temp_applications').delete().eq('user_id', user_id).execute()
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    supabase.table('temp_applications').insert({
        'user_id': user_id,
        'step': 'name'
    }).execute()
    
    await update.message.reply_text(
        "üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É!\n\n"
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    return NAME

async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if not validate_text(text):
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏.\n"
            "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return NAME
    
    supabase = get_supabase()
    supabase.table('temp_applications').update({
        'name': text,
        'step': 'age'
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 12 –¥–æ 100):"
    )
    return AGE

async def receive_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not text.isdigit():
        await update.message.reply_text(
            "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return AGE
    
    age = int(text)
    if age < 12 or age > 100:
        await update.message.reply_text(
            "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 12 –¥–æ 100.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return AGE
    
    supabase = get_supabase()
    supabase.table('temp_applications').update({
        'age': text,
        'step': 'game_nickname'
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "üéÆ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):"
    )
    return GAME_NICKNAME

async def receive_game_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if not validate_nickname(text):
        await update.message.reply_text(
            "‚ùå –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return GAME_NICKNAME
    
    supabase = get_supabase()
    supabase.table('temp_applications').update({
        'game_nickname': text,
        'step': 'why_join'
    }).eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "üí¨ –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤ –Ω–∞—à —Å–∫–≤–∞–¥? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:"
    )
    return WHY_JOIN

async def receive_why_join(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if not validate_text(text):
        await update.message.reply_text(
            "‚ùå –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return WHY_JOIN
    
    supabase = get_supabase()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º why_join –≤ –ë–î
    supabase.table('temp_applications').update({
        'why_join': text,
        'step': 'completed'
    }).eq('user_id', user_id).execute()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    response = supabase.table('temp_applications').select('*').eq('user_id', user_id).execute()
    if not response.data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END
    
    data = response.data[0]
    
    # –ü–æ–ª—É—á–∞–µ–º username
    try:
        user = await context.bot.get_chat(user_id)
        username = f"@{user.username}" if user.username else "‚Äî"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username: {e}")
        username = "‚Äî"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üéÆ –ù–∏–∫: {data['game_nickname']}\n"
        f"üí¨ –ü–æ—á–µ–º—É —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å:\n{data['why_join']}\n\n"
        f"üÜî ID: {user_id} | {username}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-—á–∞—Ç
    admin_chat_id = os.getenv("ADMIN_CHAT_ID")
    if admin_chat_id:
        try:
            await context.bot.send_message(chat_id=admin_chat_id, text=admin_message)
            await update.message.reply_text(
                "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –°–ø–∞—Å–∏–±–æ! üéâ"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω-—á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    supabase.table('temp_applications').delete().eq('user_id', user_id).execute()
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã."""
    user_id = update.effective_user.id
    supabase = get_supabase()
    supabase.table('temp_applications').delete().eq('user_id', user_id).execute()
    
    await update.message.reply_text(
        "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
