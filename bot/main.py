# bot/main.py
import os
import sys
import logging
import asyncio
import uuid
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
)
from telegram import error as telegram_error
from dotenv import load_dotenv
from bot.handlers.start import start
from bot.handlers.settings import settings_menu, button_handler, handle_settings_text
from bot.handlers.admin import (
    list_all_users,
    list_squad,
    list_city,
    add_to_squad,
    add_to_city,
    remove_from_squad,
    remove_from_city,
)
from bot.handlers.broadcast import (
    broadcast_all,
    broadcast_squad,
    broadcast_city,
    broadcast_starly,
)
from bot.database.core import get_supabase
from bot.handlers.anketa import (
    start_application,
    receive_name,
    receive_age,
    receive_game_nickname,
    receive_why_join,
    cancel,
    NAME,
    AGE,
    GAME_NICKNAME,
    WHY_JOIN,
)
from bot.handlers.appeal import (
    start_appeal,
    receive_user_type,
    receive_message,
    cancel_appeal,
    USER_TYPE,
    MESSAGE,
)
from bot.handlers.admin_reply import handle_admin_reply

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

REQUIRED_VARS = ["BOT_TOKEN", "SUPABASE_URL", "SUPABASE_KEY"]
missing_vars = []

for var in REQUIRED_VARS:
    value = os.getenv(var)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        missing_vars.append(var)
    else:
        display_value = value[:10] + "..." if len(value) > 10 else value
        logger.debug(f"‚úÖ {var} = {display_value}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º debug –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

if missing_vars:
    logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è application
bot_application = None

async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
    global bot_application
    token = os.getenv("BOT_TOKEN")

    logger.info("üîß [BOT] –°–æ–∑–¥–∞–µ–º Application...")
    application = ApplicationBuilder().token(token).build()

    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    await application.initialize()

    supabase = get_supabase()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏
    INSTANCE_ID = str(uuid.uuid4())
    logger.info(f"üîë –≠—Ç–æ—Ç –∏–Ω—Å—Ç–∞–Ω—Å –∏–º–µ–µ—Ç ID: {INSTANCE_ID}")

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã
    logger.info("üîå –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –±–æ—Ç–∞...")
    try:
        supabase.table("bot_instances").update({"is_active": False}).eq("is_active", True).execute()
        logger.info("‚úÖ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: {e}")

    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç–∞–Ω—Å—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    logger.info("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)...")
    try:
        from datetime import datetime, timedelta, timezone
        one_hour_ago = (datetime.now(timezone.utc) - timedelta(hours=1)).isoformat()
        supabase.table("bot_instances").delete().lt("started_at", one_hour_ago).execute()
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤: {e}")

    logger.info("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π...")
    try:
        supabase.table("bot_instances").insert({
            "instance_id": INSTANCE_ID,
            "is_active": True,
        }).execute()
        logger.info("‚úÖ –¢–µ–∫—É—â–∏–π –∏–Ω—Å—Ç–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞: {e}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Äî –ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù!

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
    application.add_handler(
        MessageHandler(
            filters.REPLY & filters.TEXT & filters.ChatType.GROUPS,
            handle_admin_reply,
        )
    )

    # FSM –¥–ª—è –∞–Ω–∫–µ—Ç—ã
    application.add_handler(
        ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìù –ê–Ω–∫–µ—Ç–∞$"), start_application)],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name)],
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_age)],
                GAME_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_game_nickname)],
                WHY_JOIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_why_join)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
    )

    # FSM –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
    application.add_handler(
        ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üì® –û–±—Ä–∞—â–µ–Ω–∏–µ$"), start_appeal)],
            states={
                USER_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_user_type)],
                MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_message)],
            },
            fallbacks=[CommandHandler("cancel", cancel_appeal)],
        )
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("settings", settings_menu))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("list_all", list_all_users))
    application.add_handler(CommandHandler("list_squad", list_squad))
    application.add_handler(CommandHandler("list_city", list_city))
    application.add_handler(CommandHandler("add_to_squad", add_to_squad))
    application.add_handler(CommandHandler("add_to_city", add_to_city))
    application.add_handler(CommandHandler("remove_from_squad", remove_from_squad))
    application.add_handler(CommandHandler("remove_from_city", remove_from_city))
    application.add_handler(CommandHandler("broadcast_all", broadcast_all))
    application.add_handler(CommandHandler("broadcast_squad", broadcast_squad))
    application.add_handler(CommandHandler("broadcast_city", broadcast_city))
    application.add_handler(CommandHandler("broadcast_starly", broadcast_starly))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings_text))

    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
    bot_application = application
    return application


async def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    global bot_application
    if not bot_application:
        logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ (URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env)
        WEBHOOK_URL = os.getenv("WEBHOOK_URL")
        if WEBHOOK_URL:
            logger.info(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ {WEBHOOK_URL}")
            await bot_application.bot.set_webhook(url=WEBHOOK_URL)
        else:
            logger.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        await bot_application.start()
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫.")

        # –ù–µ –∂–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        # await asyncio.Event().wait()

    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")
        raise


async def stop_bot():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
    global bot_application
    if not bot_application:
        logger.warning("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    try:
        await bot_application.stop()
        logger.info("‚èπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        await bot_application.shutdown()
        logger.info("üßπ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        bot_application = None
