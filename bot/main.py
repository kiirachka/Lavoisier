# bot/main.py
import os
import sys
import logging
import asyncio
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
from bot.handlers.start import start
from bot.handlers.settings import settings_menu, button_handler
from bot.handlers.admin import list_all_users, list_squad, list_city, add_to_squad, add_to_city, remove_from_squad, remove_from_city
from bot.handlers.broadcast import broadcast_all, broadcast_squad, broadcast_city, broadcast_starly
import signal

def signal_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª. –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ—Ç–∞...")
    # –ú—ã –Ω–µ –º–æ–∂–µ–º –∑–¥–µ—Å—å –≤—ã–∑–≤–∞—Ç—å await, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º ‚Äî asyncio.run() –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, lambda s, f: signal_handler())
signal.signal(signal.SIGTERM, lambda s, f: signal_handler())


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –í–°–ï–ì–î–ê –≤ –Ω–∞—á–∞–ª–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–ª–∞–¥–∫–∞: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ
logger.info("=" * 60)
logger.info("üöÄ [BOT] –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–û–¢–ê")
logger.info("=" * 60)
logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
logger.info(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
logger.info(f"üìÑ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ bot
if os.path.exists("bot"):
    logger.info(f"üìÅ bot/ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {os.listdir('bot')}")
else:
    logger.error("‚ùå –ü–∞–ø–∫–∞ 'bot' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
dotenv_path = '.env'
logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑: {dotenv_path}")
if not os.path.exists(dotenv_path):
    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {dotenv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

load_dotenv(dotenv_path=dotenv_path)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REQUIRED_VARS = ['BOT_TOKEN', 'SUPABASE_URL', 'SUPABASE_KEY']
missing_vars = []

for var in REQUIRED_VARS:
    value = os.getenv(var)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        missing_vars.append(var)
    else:
        # –î–ª—è –∫–ª—é—á–µ–π –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
        display_value = value[:10] + "..." if len(value) > 10 else value
        logger.info(f"‚úÖ {var} = {display_value}")

if missing_vars:
    logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)


async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    token = os.getenv('BOT_TOKEN')
    
    logger.info("üîß [BOT] –°–æ–∑–¥–∞–µ–º Application...")
    application = ApplicationBuilder().token(token).build()
    
    logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start")
    application.add_handler(CommandHandler("start", start))

    application.add_handler(CommandHandler("settings", settings_menu))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.add_handler(CommandHandler("list_all", list_all_users))
    application.add_handler(CommandHandler("list_squad", list_squad))
    application.add_handler(CommandHandler("list_city", list_city))
    application.add_handler(CommandHandler("add_to_squad", add_to_squad))
    application.add_handler(CommandHandler("add_to_city", add_to_city))
    application.add_handler(CommandHandler("remove_from_squad", remove_from_squad))
    application.add_handler(CommandHandler("remove_from_city", remove_from_city))

    application.add_handler(CommandHandler("broadcast_all", broadcast_all))
    application.add_handler(CommandHandler("broadcast_squad", broadcast_squad))
    application.add_handler(CommandHandler("broadcast_city", broadcast_city))
    application.add_handler(CommandHandler("broadcast_starly", broadcast_starly))
    
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    await application.initialize()
    
    logger.info("üßπ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    await application.bot.delete_webhook(drop_pending_updates=True)

    logger.info("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–π –∏–Ω—Å—Ç–∞–Ω—Å —Ç–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è...")
    await asyncio.sleep(5)

    logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º updater (polling)...")
    await application.updater.start_polling(drop_pending_updates=True)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    await application.start()
    
    logger.info("üí§ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    try:
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ Ctrl+C
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    finally:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater...")
        await application.updater.stop()
        
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        await application.stop()
        
        logger.info("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        await application.shutdown()
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    logger.info("üèÅ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º run() ‚Äî –æ–Ω —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π event loop
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.exception("üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:")
        sys.exit(1)
