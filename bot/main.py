# bot/main.py
import os
import sys
import logging
import asyncio
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder, CommandHandler
from bot.handlers.start import start

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –í–°–ï–ì–î–ê –≤ –Ω–∞—á–∞–ª–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–ª–∞–¥–∫–∞: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–µ
logger.info("=" * 60)
logger.info("üöÄ [BOT] –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–û–¢–ê")
logger.info("=" * 60)
logger.info(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
logger.info(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
logger.info(f"üìÑ –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir()}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ bot
if os.path.exists("bot"):
    logger.info(f"üìÅ bot/ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {os.listdir('bot')}")
else:
    logger.error("‚ùå –ü–∞–ø–∫–∞ 'bot' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
dotenv_path = '.env'
logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑: {dotenv_path}")
if not os.path.exists(dotenv_path):
    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {dotenv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

load_dotenv(dotenv_path=dotenv_path)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
REQUIRED_VARS = ['BOT_TOKEN', 'SUPABASE_URL', 'SUPABASE_KEY']
missing_vars = []

for var in REQUIRED_VARS:
    value = os.getenv(var)
    if not value:
        logger.error(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        missing_vars.append(var)
    else:
        # –î–ª—è –∫–ª—é—á–µ–π –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
        display_value = value[:10] + "..." if len(value) > 10 else value
        logger.info(f"‚úÖ {var} = {display_value}")

if missing_vars:
    logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("üîß [BOT] –°–æ–∑–¥–∞–µ–º Application...")
    
    token = os.getenv('BOT_TOKEN')
    application = ApplicationBuilder().token(token).build()
    
    logger.info("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start")
    application.add_handler(CommandHandler("start", start))
    
    logger.info("‚ñ∂Ô∏è [BOT] –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
    try:
        await application.run_polling()
    except Exception as e:
        logger.exception("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling:")
        raise

if __name__ == "__main__":
    logger.info("üèÅ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.exception("üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:")
        sys.exit(1)
