import os
import logging
from supabase import create_client, Client
from telegram import User as TgUser

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
supabase: Client = None

def get_supabase() -> Client:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase."""
    global supabase
    if supabase is None:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
        url: str = os.getenv("SUPABASE_URL")
        key: str = os.getenv("SUPABASE_KEY")
        if not url or not key:
            logger.error("SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return None
        supabase = create_client(url, key)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    return supabase

# bot/database/core.py
async def create_user_if_not_exists(user: TgUser) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç."""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –ë–î...")
    supabase_client = get_supabase()
    if not supabase_client:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è user_id (BIGINT)
        user_exists = supabase_client.table('users').select('user_id').eq('user_id', user.id).execute()
        if not user_exists.data: # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ user_exists.
            logger.info(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
            new_user = {
                "user_id": user.id,
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                # --- –î–û–ë–ê–í–õ–ï–ù–û: –Ω–æ–≤—ã–µ –ø–æ–ª—è ---
                "is_banned": False,
                "banned_features": [],
                "last_anketa_time": None,
                "last_appeal_time": None,
                "can_receive_broadcast": True, # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                "is_in_squad": False, # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                "is_in_city": False, # –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
            }
            result = supabase_client.table('users').insert(new_user).execute()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}", exc_info=True)
